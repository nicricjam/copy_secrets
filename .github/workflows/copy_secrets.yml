name: Copy Secrets
on:
  workflow_dispatch:
    inputs:
      source:
        type: environment
        description: 'Source environment'
        required: true
      destination:
        type: environment
        description: 'Destination environment'
        required: true

permissions:
  contents: write
  id-token: write

defaults:
  run:
    shell: pwsh

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  copy_secrets:
    environment: ${{ inputs.source }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: clear var
        shell: bash
        run: |
          export GITHUB_TOKEN=

      # - name: Copy secrets
      #   shell: pwsh
      #   run: |
      #     echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token
      #     gh extension install jongio/gh-setup-git-credential-helper
      #     gh setup-git-credential-helper

      #     $secrets_source = ('${{ toJson(secrets) }}' | ConvertFrom-Json -AsHashTable)

      #     $env_secrets = gh secret list -e ${{ inputs.source }} --json name | ConvertFrom-Json
      #     $x = 1
      #     foreach($s in $secrets_source.GetEnumerator()) {
      #       if ($s.Name -in $env_secrets.name) {
      #         gh secret set $($s.Name) -b $($s.Value) --env ${{ inputs.destination }}
      #       }
      #     }

  check_secrets:
    environment: ${{ inputs.destination }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Check secrets
        shell: pwsh
        run: |
          $secrets_destination = ('${{ toJson(secrets) }}' | ConvertFrom-Json -AsHashTable)

          $secrets_destination | ConvertTo-Json
          $x = 1
          foreach($s in $secrets_destination.GetEnumerator()) {
            if ($s.Name -in $env_secrets.name) {
              echo "Secret $x: $($s.Name)"
              if ($s.Value -eq "SECRET$($x)") {
                Write-Host "$($s.Name) is correct!"
              }
              $x++
            }
          }